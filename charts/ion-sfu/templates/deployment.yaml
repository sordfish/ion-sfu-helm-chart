apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ion-sfu.fullname" . }}
  labels:
    {{- include "ion-sfu.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ion-sfu.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ion-sfu.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}        
          command: ["/usr/local/bin/sfu", "-c", "/configs/sfu.toml"]
          env: 
            - name: gaddr
              value: ":50051"
            - name: jaddr
              value: ":17000"
            - name: paddr
              value: ":9876"
            - name: maddr
              value: ":8100"
        - name: {{ .Chart.Name }}-envoy
          image: "{{ .Values.image.sidecar.repository }}:{{ .Values.image.sidecar.tag }}"
          imagePullPolicy: {{ .Values.image.sidecar.pullPolicy }}        
          volumeMounts:
          - name: config
            mountPath: {{ .Values.image.sidecar.volumemountpath }}
            readOnly: true
          - name: certs
            mountPath: "/certs"
            readOnly: true  
          ports:
          {{- range .Values.config.ports }}
            {{- if .portRangeStart }}
              {{- $portrangeprotocol := .protocol }}
              {{- $portrangename := .name }}
              {{- range $i, $e := untilStep (int .portRangeStart) (int .portRangeEnd) 1 }}
            - name: {{ $portrangename }}-{{ $e }}
              containerPort: {{ $e }}
              protocol: {{ $portrangeprotocol }}         
              {{- end }}
            {{- else}}
            - name: {{ .name }}
              containerPort: {{ .port }}
              protocol: {{ .protocol }}
            {{- end }}
          {{- end }}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: 7000
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: 7000
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ include "ion-sfu.fullname" . }}-envoy
            # An array of keys from the ConfigMap to create as files
            items:
            - key: "envoy.yaml"
              path: "envoy.yaml"
        - name: certs
          secret:
            secretName: {{ include "ion-sfu.fullname" . }}-tls-secret
            items:
            - key: tls.crt
              path: tls.crt            
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
                            
